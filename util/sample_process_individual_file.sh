#!/bin/ksh
## 
## $Id: sample_process_individual_file.sh,v 1.3 2012/09/14 01:06:35 jozhao Exp $
## Usage:   {0} 
##      this script will check files in source file landing directory and archive them first.   It then will generate
##      a LoadMgr configuration file, and takes the source file names as parameters so they will be processed by
##      predefined programs.   THIS IS a SAMPLE script that demonstrate how to use LoadMgr to process income file
##      concurrently. Please define CONCURRENCY_SCOPE in .LOADMGR_PROFILE accordingly.  By default, LoadMgr only
##      check concurrency level within a package.   If this script will be run multiple time concurrently, you may
##      want to set CONCURRENCY_SCOPE=1
## Date       By        Comment
## 2012/08/29 Jozhao    
##

## set up running mode
typeset lm_package_nm=test
typeset fname_pattern="*.txt"


## Don't change the code below
typeset file_name
typeset base_name=${file_name##*/}
typeset -A file_list
typeset rc=0
typeset i=0
typeset loadmgr_package_template_nm=$2
typeset timestamp_str=$(date +"%Y_%m_%d_%H%M%S")

## find out LoadMgr installation directory, and source profile
whence ${0}|read exe_dir 
script_dir=${exe_dir%/*}
. ${exe_dir%/*}/../etc/.LoadMgr_profile

typeset file_name
typeset base_name=${file_name##*/}
typeset -A file_list
typeset i=0
typeset loadmgr_package_template_nm=$2
typeset timestamp_str=$(date +"%Y_%m_%d_%H%M%S")
typeset src_file_archive_dir=${SRC_FILE_ARCHIVE_ROOT}/$loadmgr_package_template_nm_${timestamp_srt}

## get file names
for fname in `ls -l ${SRC_FILE_LANDING_DIR}/${fname_pattern} | awk '{print $9}'`
do 
   file_list[$i]=${fname##*/} 
   ((i+=1))   
done

#make sure the files are closed
sleep 5

## archive source files
i=0
while (( $i < ${#file_list[*]} ))
do
   #move to archive before process
   mv $SRC_FILE_LANDING_DIR/${file_list[$i]} $src_file_archive_dir

   ## exit if any files are missing
   test $? -ne 0 && exit 1

   ((i+=1))   
done

############### the following line are to generate a LoadMgr conf file ##################
## construct job list in LoadMgr conf file
## in this example, the same program will process the each and every source file

print "## this conf file is generated by ${0} at" `date`
print "[[JOB_LIST]]" > ${EVENT_LOG_ROOT}/${lm_package_nm}_$timestamp_str.conf
i=0
while (( $i < ${#file_list[*]} ))
do
   print "$i  $LOADMGR_HOME/src/sample/process_src_file.sas" >> ${EVENT_LOG_ROOT}/${lm_package_nm}_$timestamp_str.conf
   ((i+=1))   
done
print " " >> ${EVENT_LOG_ROOT}/${lm_package_nm}_$timestamp_str.conf 

## construct job parameter in LoadMgr conf file
i=0
print "[[JOB_PARAMETER]]" >> ${EVENT_LOG_ROOT}/${lm_package_nm}_$timestamp_str.conf
while (( $i < ${#file_list[*]} ))
do
   print "$i|${file_list[$i]}" >>  ${EVENT_LOG_ROOT}/${lm_package_nm}_$timestamp_str.conf
   ((i+=1))   
done
############### above following line are to generate a LoadMgr conf file ##################

## kick off the generated package
$LOADMGR_HOME/bin/controller.sh -d ${EVENT_LOG_ROOT} ${lm_package_nm}_$timestamp_str
test $? -ne 0 && rc=1

## archive logs, if package failed, move the status log also
test -e $LOG_ROOT/status/${lm_package_nm}_$timestamp_str.log && \
        mv $LOG_ROOT/status/${lm_package_nm}_$timestamp_str.log $LOG_ROOT/${lm_package_nm}_$timestamp_str
mv $LOG_ROOT/${lm_package_nm}_$timestamp_str $LOG_BACKUP_ROOT

exit $rc
