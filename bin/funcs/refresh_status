## 
## $Id: refresh_status,v 1.2 2015/03/08 02:55:20 jozhao Exp $
## Usage:   {0} ${PACKAGE_NAME}
## Date       By        Comment
## 2012/03/22 Jozhao    This is a part of LoadMgr
## 2014/03/06 Jozhao    reset block ind in case of external rerun

function refresh_status {
   ##define local variables
   typeset -L38 task_id
   typeset statuscode 
   typeset begtime
   typeset endtime 
   typeset k 
   typeset pid
   typeset ppid
   typeset rc=0         #default to 0 if not found, have not been run yet.
   #typeset -L38 task_code=$1
   # get lock
   while ! $(ln -s ${LOCKFILE} ${GETLOCK} 2>/dev/null)
   do  
      #echo "waiting lock for check status"
      sleep ${REST_TIME} 
   done

   while read pid ppid task_id program_nm begtime endtime statuscode 
   do 
      if [[ "$program_nm" != "LoadMgr.sh" ]]; then
         ## get task seq id
         eval task_seq_code=\${task_seqID[${task_id}]} 

         #eval ISBLOCKED=\${blocked_array[${task_seq_code}]}
         #echo "inside of ${0} task $task_seq_code -> $pid $ppid $task_id $program_nm $begtime $endtime $statuscode $ISBLOCKED"

         case $statuscode in   
            RUNNING) 
               if [[ ${run_ind_array[${task_seq_code}]} -eq 1 ]]; then
                  rc=1 
                  status_array[${task_seq_code}]=1
               else 
                  rc=2
               fi
               ;;
            DONE) 
               rc=3
               status_array[${task_seq_code}]=3 
               ## unblock in case of external rerun
               if [[  ${blocked_array[${task_seq_code}]} -eq 1 ]]; then 
                  #echo "unblock ${task_seq_code} due to an external run"
                  blocked_array[${task_seq_code}]=0
                  ## unblock the tasks, and the array will be rebuilt 
                  k=0
                  while [[ k -lt ${#tasks[*]}  ]]
                    do
                        blocked_array[k]=0
                        ((k=$k+1))
                    done
               fi 
               ;;
            FAILED) 
               rc=2
               status_array[${task_seq_code}]=2 
               if [[ ${run_ind_array[${task_seq_code}]} -eq 1 ]]; then
                  blocked_array[${task_seq_code}]=1
                 #echo "inside of ${0} task $task_seq_code ->   $pid $ppid $task_id $program_nm $begtime $endtime $statuscode  block=1"
               fi
               ;;
            TERMINATED) 
               rc=2
               status_array[${task_seq_code}]=2 
               if [[ ${run_ind_array[${task_seq_code}]} -eq 1 ]]; then
                  blocked_array[${task_seq_code}]=1
                  #echo "inside of ${0} task $task_seq_code ->   $pid $ppid $task_id $program_nm $begtime $endtime $statuscode  block=1"
               fi
               ;;
            * ) 
               print "invalid status code, terminate LoadMgr with error" 
               terminate_loadmgr
               ;;
         esac
      fi
   done < ${LOGFILE} 

   #remove getlock
   rm -f ${GETLOCK}

   return $rc
}
