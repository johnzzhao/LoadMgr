## 
## $Id: check_status,v 1.8 2013/08/19 02:06:19 jozhao Exp $
## Usage:   {0} ${PACKAGE_NAME}
## Date       By        Comment
## 2012/03/22 Jozhao    This is a part of LoadMgr
##


function check_status  {
   ##define local variables
   typeset -L38 task_id
   typeset statuscode 
   typeset begtime
   typeset endtime 
   typeset pid
   typeset ppid
   typeset rc=0         #default to 0 if not found, have not been run yet.
   typeset -L38 task_code=$1
   # get lock
   while ! $(ln -s ${LOCKFILE} ${GETLOCK} 2>/dev/null)
   do  
      #echo "waiting lock for check status"
      sleep ${REST_TIME} 
   done

   while read pid ppid task_id program_nm begtime endtime statuscode 
   do 
      if [[ ${task_id} == ${task_code} ]];  then
         ## get task seq id
         eval task_seq_code=\${task_seqID[${task_id}]} 
         #echo "inside of ${0} task $task_seq_code, ${task_code} ->   $pid $ppid $task_id $program_nm $begtime $endtime $statuscode "

         case $statuscode in   
            RUNNING) 
               if [[ ${run_ind_array[${task_seq_code}]} -eq 1 ]]; then
                  rc=1 
                  status_array[${task_seq_code}]=1
               else 
                  rc=2
               fi
               ;;
            DONE) 
               rc=3
               status_array[${task_seq_code}]=3 
               ;;
            FAILED) 
               rc=2
               status_array[${task_seq_code}]=2 
               if [[ ${run_ind_array[${task_seq_code}]} -eq 1 ]]; then
                  blocked_array[${task_seq_code}]=1
                  #echo "inside of ${0} task $task_seq_code, ${task_code} ->   $pid $ppid $task_id $program_nm $begtime $endtime $statuscode  block=1"
               fi
               
               ;;
            TERMINATED) 
               rc=2
               status_array[${task_seq_code}]=2 
               if [[ ${run_ind_array[${task_seq_code}]} -eq 1 ]]; then
                  blocked_array[${task_seq_code}]=1
                  #echo "inside of ${0} task $task_seq_code, ${task_code} ->   $pid $ppid $task_id $program_nm $begtime $endtime $statuscode  block=1"
               fi
               ;;
            * ) 
               print "invalid status code, terminate LoadMgr with error" 
               terminate_loadmgr
               ;;
         esac
         break 1
      fi
   done < ${LOGFILE} 

   #remove getlock
   rm -f ${GETLOCK}

   return $rc
}
